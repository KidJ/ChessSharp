PHASE 0 - board and piece representation
Able to create a board from a FEN and print to stdout.

TASKS
Create types for board, pieces.
Create board state from FEN.
Pretty print board state to string from internal representation.


PHASE 1 - moving pieces
Able to move pieces in a legal manner by supply (src,dst) square via stdin.
White/black move in turn. 
Function to generate legal moves for a piece type, assuming empty board.
Function to test whether a given move is legal for a given board state.

TASKS

Update board state if the move is legal and print new board state to stdout.
Represent notion of player turn and check only moving piece of correct colour
Create move type:
- can generate a new board state by applying a move if it is legal.


PHASE 2 - move history
Move history recorded as game is played. Print move history to stdout on request.

FUTURE PHASES ...

Game over!
- checkmate - are we in check, and is the king in check in all other possible next moves for the other player
- perpetual
- 50 moves without piece taken

Special moves:
- castling
- en passant
- promotion

Full PGN support

Create unit tests from online game databases.

Investigate making front end using electron.
